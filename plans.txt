  Phase 1: Foundation & Security (Weeks 1-2)

  1. Password Strength Validation
  - Add backend validation rules (complexity, length, common passwords)
  - Create password strength API endpoint for frontend feedback
  - Update registration/change password flows
  - Why first: Simple, no dependencies, improves security immediately

  2. Rate Limiting (IP-based)
  - Implement Redis/in-memory store for rate limiting
  - Add IP-based limits on login, registration, password reset
  - Create rate limiting middleware/filter
  - Why second: Protects against brute force while building other features

  Phase 2: User Experience (Weeks 3-4)

  3. Persistent Login ("Remember Me")
  - Create persistent token entity and repository
  - Implement secure token generation/validation
  - Add checkbox to login form, extend session management
  - Why third: Enhances UX, builds session expertise for social login

  4. Account Deletion
  - Design soft vs hard delete strategy
  - Create account deletion endpoint with confirmation
  - Implement data cleanup processes (cascade deletes, anonymization)
  - Add "delete my account" UI flow
  - Why fourth: Self-contained feature, good for user control

  Phase 3: Advanced Authentication (Weeks 5-7)

  5. Google OAuth Integration
  - Set up Google Developer Console, obtain credentials
  - Add OAuth dependencies (Spring Security OAuth2)
  - Create OAuth user linking/account creation logic
  - Handle edge cases (existing email conflicts)
  - Add "Sign in with Google" buttons
  - Why last: Most complex, requires understanding of existing auth flow

  Key Design Decisions to Make First

  Rate Limiting:
  - Storage: Redis vs in-memory vs database
  - Limits: Per IP, per user, per endpoint
  - Time windows: 15min, 1hr, 24hr sliding windows

  Persistent Login:
  - Token storage: Database vs JWT
  - Security: Rotation strategy, device fingerprinting
  - Expiration: 30 days? 6 months?

  Account Deletion:
  - Soft delete (mark as deleted) vs hard delete
  - Data retention policy for legal compliance
  - What data to preserve (audit logs, transaction history)

  Google OAuth:
  - Account linking strategy when email already exists
  - Profile data sync (name, avatar)
  - Fallback authentication when OAuth fails

